#서브쿼리
일반적인 쿼라(메인, 주 쿼리)안에 있는 또다른 쿼리로 보조 /하위쿼리라고 한다.
메인쿼리와 서브쿼리가 합쳐져 한 문장을 이룸

위치에 따라서 스칼라 서브쿼리, 인라인 뷰, 중첩 서브쿼리로 나뉜다.

##.쿼리의 연관성
연관성 있는 서브쿼리는 메인쿼리와 조인하고 
연관성이 없는 서브쿼리는 메인쿼리와 독립적이다.


###스칼라 서브쿼리
메인쿼리의 Select 절에 위치한 서브쿼리
Select 절에 
단일값 ROW도 1개연산 값도 1개

조인과 스칼라 서브쿼리
스칼라 서브쿼리는 NULL의 값도 나오기 때문에 많이 쓰인다. 하지만 많은 데이터 상에 사용할 경우 성능상 좋지 않다.
-> 외부조인 사용이 더 났다.

###인라인 뷰의 서브쿼리는 메인쿼리의 from절에 위치하며, 서브쿼리 자체가 테이블 처럼 동작한다.
최종 반환하는 로우와 칼럼, 표현식 수는 1개 이상 가능하다.
하나의 테이블만 읽어서는 원하는 정보를 가져오기 어려우므로, 인라인 뷰의 쿼리가 여러 테이블을 조인하여 
가져 올 수 있기 때문에 가장 많이 쓰이는 서브 쿼리이다. 

LATERAL 사용해 서브쿼리 내에서 조인 조건이 가능해졌다.

###중첩서브쿼리
메인쿼리의 WHERE절에 위치한다.
서브쿼리가 조건절의 칠부로 사용된다.
값비교 가능

1.   다음  문장은  어떤  정보를  조회하는지  설명해  보세요. 

SELECT a.employee_id 
,a.first_name || ' ' || a.last_name emp_name 
,a.job_id 
,a.salary 
,( SELECT AVG(b.salary) 
FROM employees b 
WHERE a.job_id = b.job_id 
GROUP BY b.job_id 
)  avg_salary 
FROM employees a; 

===>사원의 그병와  job_ID 별 평균 급여값을 구하는 값이다.

2. 다음  쿼리를  LATERAL 키워드를  사용해  같은  결과를  조회하도록  변경해  보세요
SELECT b.department_name, loc.street_address, loc.country_name 
FROM departments b ,
LATERAL( SELECT l.location_id, l.street_address, c.country_name 
FROM locations l,   countries c 
WHERE l.country_id = c.country_id
AND b.location_id = loc.location_i ) loc;

3. 다음  문장을  IN 대신  EXISTS 연산자를  사용해  같은  결과를  조회하도록  변경해  보세요.

SELECT employee_id, 
job_id, salary 
FROM employees 
WHERE (job_id, salary ) IN ( SELECT job_id, min_salary 
FROM jobs);

SELECT employee_id, job_id, salary 
FROM employees a
WHERE  EXISTS
(SELECT 1
FROM jobs b
WHERE a.job_id = b.job_id AND a.salary=b.min_salary
);

4. 다음은  ANTI 조인  문장입니다. 이  문장은  employees 테이블에  할당되지  않은  부서정보를 조회하려는  문장인데, 실행하면  데이터가  조회되지  않습니다. 해당  부서정보를  조회하도록 이  쿼리를  수정해  보세요. 
SELECT * 
FROM departments 
WHERE department_id NOT IN ( SELECT a.department_id 
FROM employees a ) ;

SELECT * 
FROM departments 
WHERE department_id NOT IN ( SELECT a.department_id 
FROM employees a
WHERE a.department_id IS NOT NULL) ;

5. covid19 테이블을  사용해  월별, 대륙별, 국가별  감염수와  각  국가가  속한  대륙을  기준으로 감염수  비율을  구하는  쿼리를  작성하시오. (서브쿼리  사용)
SELECT a.months, a.continent, a.country,a.new_cases, b.continent_cases 
, DECODE(b.continent_cases,0,0,
ROUND(a.new_cases/b.continent_cases*100,2)) rates
FROM (SELECT country,continent, TO_CHAR(dates,'YYYY-MM')months,sum(new_cases)new_cases
 From COVID19
 GROUP BY TO_CHAR(dates,'YYYY-MM'),country,continent)a
 ,(SELECT continent
 , TO_CHAR(dates,'YYYY-MM')months
 , sum(new_cases)continent_cases
 FROM COVID19
 GROUP BY TO_CHAR(dates,'YYYY-MM'), continent)b
 WHERE a.months = b.months
 AND a.continent=b.continent
 AND a.new_cases>0
 ORDER BY  1,2,4 DESC;


6. covid19 테이블을  사용해  2020년  한국의  월별  검사수, 확진자수, 확진율을  구하는  쿼리를 작성하시오

SELECT TO_CHAR(dates, 'MM') months,
NVL(SUM(new_tests),0)검사수,
NVL(SUM(new_cases),0)확진자수, 
ROUND(NVL(SUM(new_cases),0)/NVL(SUM(new_tests),0)*100,2) 확진율
FROM COVID19
WHERE ISO_CODE ='KOR'
AND TO_CHAR(dates,'YYYY')='2020'
GROUP BY TO_CHAR(dates,'MM')
ORDER BY 1;


7. Covid19 테이블에서 2020년 전체 가장 많은 확진자가 나온 상위 5개 국가를 구하는 쿼리를 작성하시오.

 sum(new_cases)null값 처리/ 2020에 해당 / 국가별 그룹처리(world제외)/ total_cases top_n 넣기


SELECT *
FROM(SELECT country,
NVL(SUM(new_cases),0)cases
FROM COVID19
WHERE TO_CHAR(dates,'YYYY')='2020'
AND country <>'World'
GROUP BY country
)
ORDER by cases DESC
FETCH FIRST 5 ROWS ONLY;


2. Covid19 테이블에서 2020년 인구대비 사망률이 가장 많은 상위 20개 국가를 구하는
쿼리를 작성하시오.

### R&
####0 색상

# plot 함수로 색깔 점 찍기
plot(0,0, pch=16, cex=10, col='black')
plot(0,0, pch=16, cex=10, col='pink')
plot(0,0, pch=16, cex=10, col='dodgerblue')
## 일반적으로 "col=" 옵션으로 색상 변경 가능/pch:점모양 cex:점크기

## 색상이름은 아래 참고
## http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf

# rgb( ) 함수와 "#RRGGBB" HEX코드 활용
rgb(  0/255,  70/255,  42/255)
## Ewha Green

plot(0,0, pch=16, cex=10, col='#00462A')

# RColorBrewer 패키지의 활용
install.packages('RColorBrewer')
library(RColorBrewer)

## http://colorbrewer2.org/


# 패키지 내 모든 색상조합 확인  
display.brewer.all()  
## 색상조합 이름 확인

brewer.pal(9, 'Set1')
brewer.pal(9, 'Blues')
brewer.pal(9, 'YlGnBu')
brewer.pal(9, 'Spectral')


##1 ggplot2 패키지를 활용한 시각화

# ggplot2 패키지 설치, 불러오기 
install.packages('ggplot2')
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
# 데이터 요약/처리를 위한 패키지도 불러오기  
library(dplyr)
library(tidyr)

install.packages("gapminder")
library(gapminder)
data(gapminder)
data1 <- gapminder[gapminder$year=="2007",]

####################연속형데이터
## 1.  그릴 부분의 도와지를 그려본다. (aes(x = , y=))

ggplot(data1) +
  aes(x = gdpPercap) + #x축 지정
  aes(y = lifeExp) #y축 지정


# 이렇게 한번에 그릴 수 있다.
# ggplot(data1,aes(x=gdpPercap,y=lifeExp))

####################
## 2. 그림을 선택한다. +geom_point
ggplot(data1) +
  aes(x = gdpPercap) + #x축 지정
  aes(y = lifeExp) + #y축 지정
  geom_point() #나타낼 그림

####################
## 3. 그림을 꾸며준다
windows()   #시각화 결과를 따로 창에 띄워서 볼 때 사용하는 구문
## 3-1 색을 지정한다 aes(color = )
ggplot(data1) +
  aes(x = gdpPercap) + #x축 지정
  aes(y = lifeExp) + #y축 지정
  geom_point() + #나타낼 그림
  aes(color = continent) #색 지정


#같은 표현 / 
###aes를 써서 축에 대한 기준을 명확히해서 쓴다면 어느 곳에 들어가도 괜찮다.
###ggplot(aes(x=gdpPercap, y=lifeExp, color=continent))   /geom_point(aes(color=continent))
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, color=continent)) + geom_point()
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp)) + geom_point(aes(color=continent))
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp)) + geom_point(color = "red")

## 불가능
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, color = "red")) + geom_point()
### 색이 바뀐것이 아니라 변수의 이름을 "red"로 인식하는 것이다.
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, fill = continent)) + geom_point()


####################
## 3-2 모양 지정한다 aes(shape = )

ggplot(data1) +
  aes(x = gdpPercap) + #x축 지정
  aes(y = lifeExp) + #y축 지정
  geom_point() + #나타낼 그림
  aes(color = continent) + #색 지정
  aes(shape = continent) #모양 지정

# 같은표현
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, color = continent, shape = continent)) + geom_point()
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, color = continent)) + geom_point(aes(shape = continent))

# 특정모양 지정할 경우, 따로 뺴서 geom_point에 적어준다. 
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, color = continent)) + geom_point(shape = 3)


####################
## 3-3 크기 지정한다 aes(size = )

ggplot(data1) +
  aes(x = gdpPercap) + #x축 지정
  aes(y = lifeExp) + #y축 지정
  geom_point() + #나타낼 그림
  aes(color = continent) + #색 지정
  aes(shape = continent) + #모양 지정
  aes(size = pop) #크기 지정

# 같은표현
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, color = continent, shape = continent, size = pop)) + geom_point()
# 특정 크기 지정
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, color = continent, shape = continent)) + geom_point(size = 3)


####################
## 3-4 투명도를 지정한다 aes(alpha = )    .... 0.7~0.8

ggplot(data1) +
  aes(x = gdpPercap) + #x축 지정
  aes(y = lifeExp) + #y축 지정
  geom_point() + #나타낼 그림
  aes(color = continent) + #색 지정
  aes(shape = continent) + #모양 지정
  aes(size = pop) + #크기 지정
  aes(alpha = lifeExp) #투명도

# 같은표현
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, color = continent, shape = continent, size = pop, alpha = lifeExp)) + geom_point()
# 특정 크기 지정
data1 %>% ggplot(aes(x=gdpPercap, y=lifeExp, color = continent, shape = continent, size = pop)) + geom_point(alpha = 0.5)


###########################################
############### 연습해보기  ###############
###########################################
insurance=read.csv('insurance.csv', fileEncoding='UTF-8')
head(insurance)
#1. bmi에 따라서 charges가 어떻게 변하는지 점그래프를 그리시오
## region을 색으로 지정
## sex를 모양으로 지정
## 투명도는 0.7
ggplot(insurance)+
  aes(x=bmi)+
  aes(y=charges)+
  aes(color=region)+
  aes(shape=sex)+
  geom_point(alpha=0.7)

insurance%>%ggplot(aes(x=bmi, y=charges, color=region,shape=sex))+geom_point(alpha=0.7)

insurance%>%ggplot(aes(x=bmi,y=charges,color=region,shape=sex))+geom_point(alpha=0.7)


#2. age에 따라서 charges가 어떻게 변하는지 점그래프를 그리시오
## bmi 색으로 지정
## smoker를 모양으로 지정
insurance %>%ggplot(aes(x=age, y=charges,color=bmi,shape=smoker))+geom_point()

ggplot(insurance)+
  aes(x=age)+
  aes(y=charges)+
  geom_point()+
  aes(color=bmi)+
  aes(shape=smoker)

insurance%>%ggplot(aes(x=age,y=charges,color=bmi,shape=smoker))+geom_point()

## 데이터의 종류에 따라서 시각화 할 때 사용하는 그래프가 달라진다.
## 데이터분석에서 접근법이 중요하다 Accuracy에 대해서는 차후의 문제....;ㅅ;
###########################################



## 막대그래프 (e.g., 범주형데이터 시각화시)

######################### 막대그래프
###x축은 범주형이고 y는 빈도수 이므로 막대그래프에서는 x축만 지정해도 된다.
###하지만 그렇지 않은 경우도 있....

#1. 도화지 그리기
ggplot(data1) +  
  aes(x = continent) # x축 지정


#2. 그림 그리기
ggplot(data1) +  
  aes(x = continent) + # x축 지정
  geom_bar() # 막대그래프 그리기


#3. 꾸미기  
ggplot(data1) +  
  aes(x = continent) + # x축 지정
  geom_bar() + # 막대그래프 그리기
  aes(fill = continent) # 전체색
## 색설정은 변수기반으로 한다

ggplot(data1) +  
  aes(x = continent) + # x축 지정
  geom_bar() + # 막대그래프 그리기
  aes(fill = continent) + # 전체색
  scale_fill_brewer(palette='Set1') #팔레트 사용하기


#######
# 주의!
# 막대그래프는 color이 아닌 fill로 사용! (누적에 대한 데이터 관련 ../산점도=color)
###color 로 칠 경우, 막대의 테두리만 색이 들어간다.
ggplot(data1) +  
  aes(x = continent) + # x축 지정
  geom_bar() + # 막대그래프 그리기
  aes(color = continent)  # 개별색
#######


##### x와 y를 모두 지정해주고 싶으면? stat = "identity"
#### 개별개별 지정하겠다는 의미, y축을 설정하고 stat="identity"를 쓰면 오류남

ggplot(data1) +  
  aes(x = continent) + # x축 지정
  aes(y = lifeExp) + # y축 지정
  geom_bar(stat = "identity") + # 막대그래프 x,y축  
  aes(fill = continent) # 전체색

# 주의 (x,y축을 모두 설정하여서 color지정 후에 누적된 모습으로 보여짐)
ggplot(data1) +  
  aes(x = continent) + # x축 지정
  aes(y = lifeExp) + # y축 지정
  geom_bar(stat = "identity") + # 막대그래프 x,y축  
  aes(color = continent) # 전체색


##### 데이터 전처리와 막대 차트 그리기
###+와 파이프라인(%>%)사용하는 경우를 잘 구분해야한다.
###파이프라인 안에서 ggplot을 할 경우 데이터를 따로 안넣어 줘도 된다.



# continent 마다 평균을 그리고 싶으면??

data1 %>%
  group_by(continent) %>%
  summarise(mean = mean(lifeExp))


data1 %>%
  group_by(continent) %>%
  dplyr::summarise(mean = mean(lifeExp)) %>%
  ggplot() +  
  aes(x = continent) +  
  aes(y = mean) +
  geom_bar(stat = "identity") +  
  aes(fill = continent) +
  aes(alpha = 0.7)


# 나눠서 그리는 방법!
gapminder %>%
  filter(year %in% c(2002,2007)) %>%
  group_by(continent,year) %>%
  dplyr::summarise(mean = mean(lifeExp)) %>%
  ggplot() +  
  aes(x = continent) +  
  aes(y = mean) +
  geom_bar(stat = "identity") +  
  aes(color = continent) +  
  aes(fill = continent) +
  facet_grid(~year) # 특정 변수로 구분해서 그리고 싶다면?


###########################################
############### 연습해보기  ###############
###########################################
head(insurance)

#1. insurance 데이터에서 region별 중앙값을 구한후 막대그래프를 그리시고
##  region을 색으로 지정
## 투명도는 0.7

insurance %>%
  group_by(region) %>%
  summarise(median = median(charges))%>%
  ggplot()+
  aes(x=charges)+
  aes(y=med)
  geom_bar(stat="identity")+
  aes(color=region)+
  aes(alpha=0.7)
  
  insurance%>%
    group_by(region)%>%
    summarise(median=median(charges))%>%
    ggplot(aes(x=region,y=median,fill=region))+
    geom_bar(stat="identity")

  insurance%>% 
    group_by(region)%>%
    summarise(median=median(charges))%>%
    ggplot(aes(x=region,y=median,fill=region,alpha=0.7))+geom_bar(stat="identity")



#2. insurance 데이터에서 sex, smoker별 중앙값을 구한후 막대그래프를 그리시고
## x축은 smoker이며 sex를 색으로 구분
##  region을 색으로 지정
## 투명도는 0.7
insurance%>%
  group_by(sex,smoker)%>%
  summrise(med=median(charges))%>%
  ggplot()+
  aes(x=smoker)+
  aes(y=med)+
  geom_bar(stat="identity")+
  aes(fill=sex)+
  aes(alpha=0.7)+


insurance %>%
  group_by(sex,smoker)%>%
  summarise(median=median(charges))%>%
  ggplot(aes(x=smoker,y=median,fill=sex))+
  geom_bar(stat="identity")

insurance%>%
  group_by(sex,smoker)%>%
  summarise(median=median(charges))%>%
  ggplot(aes(x=smoker,y=median, fill=sex,alpha=0.7))+
  geom_bar(stat="identity")


######################### 박스 그래프 geom_boxplot() <<<<다시 보기 필기 다날아갔다.ㅠㅠ


gapminder %>%
  ggplot(aes(x=continent, y= lifeExp)) + 
  geom_boxplot()

gapminder %>%
  ggplot(aes(x=continent, y= lifeExp, fill= continent)) + 
  geom_boxplot()


gapminder %>%
  ggplot(aes(x=continent, y= lifeExp, fill= continent)) + 
  geom_boxplot(alpha = 0.5)


# 주의! 요약을 한 데이터를 사용하지 않는다!
gapminder %>% 
  group_by(continent) %>%
  dplyr::summarise(mean = mean(lifeExp)) %>%
  ggplot(aes(x=continent, y= mean, fill= continent)) + geom_boxplot()

###한 변수로 처리해서 group으로 묶어주면가능...

######################### 히스토그램 geom_boxplot()
###구간을 어떻게 자르는 가에 따라 데이터가 보여지는게 달라질 수 있다.

gapminder %>%
  ggplot(aes(x=lifeExp)) + 
  geom_histogram()

gapminder %>%
  ggplot(aes(x=lifeExp)) + 
  geom_histogram() +
  facet_grid(~continent)


######################### 선 그래프
####시게열데이터의 경우 사용

gapminder %>%
  group_by(year) %>%
  summarise(sum = sum(lifeExp))


gapminder %>%
  group_by(year) %>%
  dplyr::summarise(sum = sum(lifeExp)) %>%
  ggplot(aes(x=year,y=sum)) + geom_line()


#  여러 그룹을 그리고 싶을 경우 : ggplot안에 'group='을 넣어준다.

gapminder %>%
  group_by(year,continent) %>%
  summarise(mean = mean(lifeExp))

gapminder %>%
  group_by(year,continent) %>%
  dplyr::summarise(mean = mean(lifeExp)) %>%
  ggplot(aes(x=year, y=mean , group=continent ,color= continent)) + geom_line()


###########################################
############### 연습해보기  ###############
###########################################

#1 insurance데이터에서 children이 0보다 크면 1, 0이면 0인 변수 ch_data를 만드시오
head(insurance)
## children >0, 1 =0 
insurance%>%
mutate(ch_data=ifelse(children>0,1,0))

#2 insurance데이터를 활용해서 막대그래프를 그리시오
## x축은 region y축은 charges이며 ch_data를 색으로 구분
insurance$
insurance%>%
  ggplot(aes(x=region,y=charges,fillfactor(ch_data)))+geom_boxplot()


#3 insurance데이터를 활용해서 막대그래프를 그리시오
## x축은 charges ch_data를 색으로 구분
## region마다 4개의 그래프를 그리시오
group=region


#4 insurance데이터를 활용해서 막대그래프를 그리시오
## x축은 region y축은 charges이며 ch_data를 색으로 구분
## (누적 막대그래프와 ch_data별 비교 막대그래프)





### ggplot 추가

HR <- read.csv("HR_comma_sep.csv")
HR$left = as.factor(HR$left)
HR$salary = factor(HR$salary,levels = c("low","medium","high"))

# satisfaction_level : 직무 만족도
# last_evaluation : 마지막 평가점수
# number_project : 진행 프로젝트 수
# average_monthly_hours : 월평균 근무시간
# time_spend_company : 근속년수
# work_accident : 사건사고 여부(0: 없음, 1: 있음, 명목형)
# left : 이직 여부(0: 잔류, 1: 이직, 명목형)
# promotion_last_5years: 최근 5년간 승진여부(0: 승진 x, 1: 승진, 명목형)
# sales : 부서
# salary : 임금 수준


#####################
### 테마 변경하기 ###
#####################
library(ggthemes)

# Classic Theme
ggplot(HR,aes(x=salary)) +  
  geom_bar(aes(fill=salary)) +
  theme_classic()


# BW Theme
ggplot(HR,aes(x=salary)) +  
  geom_bar(aes(fill=salary)) +
  theme_bw()

Graph = ggplot(HR,aes(x=salary)) +  
  geom_bar(aes(fill=salary)) 


## 패키지를 통한 다양한 테마 변경 (ggtitle:테마이름 입력)

Graph + theme_bw() + ggtitle("Theme_bw") 
Graph + theme_classic() + ggtitle("Theme_classic") 
Graph + theme_dark() + ggtitle("Theme_dark") 
Graph + theme_light() + ggtitle("Theme_light")  

Graph + theme_linedraw() + ggtitle("Theme_linedraw") 
Graph + theme_minimal() + ggtitle("Theme_minimal") 
Graph + theme_test() + ggtitle("Theme_test") 
Graph + theme_void() + ggtitle("Theme_vold") 


#####################
### 범례제목 수정(labs) ###
#####################
ggplot(HR,aes(x=salary)) +  
  geom_bar(aes(fill=salary)) +
  theme_bw() +
  labs(fill = "범례 제목 수정(fill)")

# 범례 테두리 설정 (하나하나 변경해보면서 확인해야 한다./기존 패키지 이용 권장)
Graph + theme(legend.position = "top")
Graph + theme(legend.position = "bottom")
Graph + theme(legend.position = c(0.9,0.7))
Graph + theme(legend.position = 'none')


#####################
### 축 변경 ###
#####################

# 이산형 - deiscreate()
# 연속형 - continuous()

ggplot(HR,aes(x = salary)) +  
  geom_bar(aes(fill = salary)) +
  theme_bw() +
  scale_x_discrete(labels = c("하","중","상")) +  #x축 범주의 순서 지정 가능
  scale_y_continuous(breaks = seq(0,8000,by = 1000)) #축의 범위 수정 가능

ggplot(HR,aes(x = salary)) +  
  geom_bar(aes(fill = salary)) +
  theme_bw() +
  scale_x_discrete(labels = c("하","중","상")) +
  scale_y_continuous(breaks = seq(0,8000,by = 1000)) +
  scale_fill_discrete(labels = c("하","중","상"))


ggplot(HR,aes(x = salary)) +  
  geom_bar(aes(fill = salary)) +
  theme_bw() +
  ylim(0,5000)

ggplot(HR,aes(x = salary)) +  
  geom_bar(aes(fill = salary)) +
  theme_bw() +
  ylim(0,13000)

### y축과 x축에 대해서도 
### 이상치를 제외하고 싶을 때 축설정을 통해 범위를 변경하며 제외할 수 있다.

#####################
### 색 변경 ###
#####################

ggplot(HR,aes(x = salary)) +  
  geom_bar(aes(fill = salary)) +
  theme_bw() +
  scale_fill_manual(values = c('red','royalblue','tan')) #각각 행에 대한 색 지정 가능


ggplot(HR,aes(x = salary)) +  
  geom_bar(aes(fill = salary), alpha = 0.4) +
  theme_bw() +
  scale_fill_manual(values = c('red','royalblue','tan')) 

#####################
### 글자크기,각도 수정 ###
#####################

# coord_flip() : 대칭 그래프
# theme_bw : 글자체 수정

ggplot(HR,aes(x = salary)) +  
  geom_bar(aes(fill = salary), alpha = 0.4) +
  theme_bw() +
  scale_fill_manual(values = c('red','royalblue','tan')) +
  coord_flip()  #행과 열이 바뀐다.



ggplot(HR,aes(x = salary)) +  
  geom_bar(aes(fill = salary)) +
  theme_bw() +
  scale_fill_manual(values = c('red','royalblue','tan'))  +
  coord_flip() +
  theme(legend.position = 'none', # 범례 없이
        axis.text.x = element_text(size = 15,angle = 90), #angle 글자의 각도/ 데이터가 많아서 이름이 겹쳐질 경우 조정
        axis.text.y = element_text(size = 15),
        legend.text = element_text(size = 15))


# 그래프에 평행선, 수직선, 대각선을 그릴 수 있는 명령어
# 참조선을 그릴 때 유용하다.

ggplot(NULL) +
  geom_vline(xintercept = 10, 
             col = 'royalblue', size = 2) +     #세로
  geom_hline(yintercept = 10, linetype = 'dashed', #dashed: 점선 
             col = 'royalblue', size = 2) +      #가로
  geom_abline(intercept = 0, slope = 1, col = 'red',
              size = 2) +                        #기울기(slope)가 있는 선/ intercept:절편
  theme_bw()



#### 추가 유용한 그래프
###################열지도(heatmap)
###범주형 데이터가 2개 이상이다. 2개의 데이터를 전처리해서 열지도로 그리기....

# 데이터 요약

agg2 = insurance %>% 
  mutate(bmi_grp = cut(bmi, 
                       breaks=c(0,30,35,40,100), 
                       labels=c('G1','G2','G3','G4'))) %>% 
  group_by(region, bmi_grp) %>% 
  summarise(Q90 = quantile(charges, 0.9))

quantile(iris$Sepal.Width,0.5) #중위수
quantile(iris$Sepal.Width,0.7) #70%   
##quantile : 4분위에 있는 값을 알고 싶을 때 사용

## quantile( , q) : q*100% 값 계산

agg2 %>%  #x,y축 범주형/ fill은 Q
  ggplot(aes(x=region, y=bmi_grp, fill=Q90)) +
  geom_tile()


# 색상 지정  
agg2 %>% 
  ggplot(aes(x=region, y=bmi_grp, fill=Q90)) +
  geom_tile() +
  scale_fill_gradient(low='white', high='#FF6600')
#색지정하는 것


agg2 %>% 
  ggplot(aes(x=region, y=bmi_grp, fill=Q90)) +
  geom_tile() +
  scale_fill_distiller(palette='YlGnBu')



###########################################
############### 연습해보기  ###############
###########################################

# (실습) NHIS에서 AGE_GROUP, DSBJT_CD별 EDEC_TRAMT 평균 계산 후 저장
#        저장된 데이터로 열지도 시각화





###########################################
# tidyr + dplyr + ggplot을 한번에

# 데이터 불러오기
## 역변호가 150인 서울역 데이터 
library(openxlsx)
subway_2017 = read.xlsx('subway_1701_1709.xlsx')
names(subway_2017)[6:25] <- paste0('H', substr(names(subway_2017)[6:25], 1, 2))

head(subway_2017)
# gather( ) 함수를 활용하여 H05부터 H24까지 변수를 모아
# '시간대'와 '승객수'으로 구분하는 데이터 subway2 만들기
subway2 = gather(subway_2017, 시간대, 승객수, H05:H24)

## 위에서 만든 subway2 데이터와 dplyr 패키지를 활용하여

# 역명/시간대별 전체 승객수 합계 계산 (승객수 합계의 내림차순으로 정렬)
subway2 %>% 
  group_by(역명, 시간대) %>% 
  summarise(SUM = sum(승객수)) %>% 
  arrange(desc(SUM))


### 이러한 tidyr을 통해서 데이터를 시각화하기
### 시간대별로 승객 합계 막대차트로 그려보기!



# options("scipen" = 100)
