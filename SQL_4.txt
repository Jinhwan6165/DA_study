4-1.
GROUP BY 
항복별 집계값 계산 
count함수에서만 (*) 사용가능
SUM(expr)
AVG(expr)
MAX(expr)
MIN(expr)

(1)
SELECT COUNTRY_ID, COUNT(*)
FROM LOCATIONS
GROUP BY COUNTRY_ID
ORDER BY COUNTRY_ID;

AU	1
BR	1
CA	2
CH	2
CN	1
DE	1
IN	1
IT	2
JP	2
MX	1
NL	1
SG	1
UK	3
US	4

(2)
SELECT TO_CHAR(hire_date,'Q'), COUNT(*)
FROM EMPLOYEES
GROUP BY TO_CHAR(hire_date,'Q')
ORDER BY 1;

(3)
SELECT job_id, ROUND(AVG(salary),0) avg_salary,
ROUND(SUM(salary)/COUNT(*),0)
FROM employees
GROUP BY job_id
ORDER BY 1; 

(4)
SELECT TO_CHAR(DATES, 'YYYY-MM')MONTHS, SUM(NEW_CASES)
FROM COVID19
WHERE ISO_CODE ='KOR'
GROUP BY TO_CHAR(DATES, 'YYYY-MM')
ORDER BY 1;

HAVING 절
HAVING 절은 해석상 WHERE 절과 동일하다. 단 조건 내용에 그룹 함수를 포함하는 것만을 포함한다.

일반 조건은 WHERE 절에 기술하지만 그룹 함수를 포함한 조건은 HAVING 절에 기술한다.


4-2. 
1. 다음 쿼리를 실행하면 오류가 발생하는데 그 이유는 무엇일까요?
SELECT job_id jobs
FROM employees
WHERE department_id = 60
UNION 
SELECT job_id
FROM employees
WHERE department_id = 90
ORDER BY job_id;

 첫째 문장에서 SELECT job_id 'jobs' 알리야스 사용 불가한데 사용했기 떄문이다.
select구문의 jobs를 없애거나 order by의 'job_id'를 'jobs'로 바꾸면 오류 없이 실행이 된다.
그 이유는 최종 변환되는 컬럼명은 맨 첫 SELECT 절의 컬럼 이름에 따르기 떄문이다.

(2) 
SELECT employee_id, hire_date
FROM employees
WHERE TO_CHAR(hire_date, 'YYYY')='2001'
UNION ALL
SELECT employee_id, hire_date
FROM employees
WHERE TO_CHAR(hire_date, 'YYYY')='2003'
ORDER BY 2;

(3)
SELECT employee_id, hire_date
FROM employees
WHERE TO_CHAR(hire_date, 'YYYY')='2001'
UNION ALL
SELECT employee_id, hire_date
FROM employees
WHERE TO_CHAR(hire_date, 'YYYY')='2003'
ORDER BY 2;




4-3. 집계 쿼리, 집합 연산자 활용 및 기타

(1) 급여가 10000 이상인 사원의 평균 급여를 구하라
· 대상 테이블 : EMPLOYEES
· 급여가 10000 이상인 조건
 salary >= 10000
· 평균 급여
 AVG 집계 함수 사용

TRY1)
SELECT AVG(salary)
FROM employees
WHERE salary>=10000;
==> 12632.4210526315789473684210526315789474
(소수점 정리가 필요... 반올린 ROUND 함수 이용)

TRY2)
SELECT ROUND(AVG(salary),0)
FROM EMPLOYEES
WHERE salary>=10000;
==>12632


(2) 입사 월별 사원수를 구하라
· 대상 테이블 : EMPLOYEES
· 입사월
 입사일자인 hire_date 컬럼 가공 필요
 TO_CHAR(hire_date, 'MM') 
· 사원수
 COUNT 집계 함수 사용

TRY1)
SELECT TO_CHAR(hire_date,'MM'),
COUNT(*)
FROM EMPLOYEES
GROUP BY TO_CHAR(hire_date,'MM')
ORDER BY 1;

(2-1) 요일별 입사 사원수는?
SELECT TO_CHAR(hire_date,'DAY'),
COUNT(*)
FROM EMPLOYEES
GROUP BY TO_CHAR(hire_date,'DAY')
ORDER BY 1;

(3) 이름이 동일한 사원과 동일인 수를 구하라
· 대상 테이블 : EMPLOYEES
· 이름
 first_name 컬럼
· 사원수
 COUNT 집계 함수 사용

SELECT first_name,
COUNT(*)
FROM EMPLOYEES
GROUP BY first_name
ORDER BY first_name;

SELECT first_name,
COUNT(*)
FROM EMPLOYEES
GROUP BY first_name
HAVING COUNT(*)>1
ORDER BY first_name;

(3-1) j로 시작하는 사람만 불러오고 싶다면?
SELECT first_name,
COUNT(*)
FROM EMPLOYEES
WHERE first_name LIKE 'J%'
GROUP BY first_name
HAVING COUNT(*)>1
ORDER BY first_name;

* LIKE는 집계함수가 아니므로 WHERE절에 쓸 수 있다.

2. 집합연산자는 언제 쓸까?  
SELECT yearmon,
SUM(budget_amt)budget,
SUM(sale_amt)sale,
ROUND(SUM(sale_amt)/sum(budget_amt),2)*100 reates
FROM (SELECT yearmon, budget_amt, 0sale_amt
FROM budget_table
UNION
SELECT yearmon, 0budget_amt,sale_amt
FROM sale_table)
GROUP BY yearmon
ORDER BY 1;